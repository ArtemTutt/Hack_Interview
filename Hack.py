import tkinter as tk
from tkinter import ttk
from tkinter import Label, Button, Text
from tkinter import messagebox
from ttkbootstrap import Style
import pyaudio
import wave
import threading
from openai import OpenAI


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏
RATE = 16000  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
CHUNK = 1024  # –†–∞–∑–º–µ—Ä —Ñ—Ä–µ–π–º–∞
CHANNELS = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
FORMAT = pyaudio.paInt16  # –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ
OUTPUT_FILENAME = "output.wav"  # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

openai = OpenAI(
    api_key="RmuQxcWMGz7rbIWYurA6SrRZzfBR4dal",
    base_url="https://api.deepinfra.com/v1/openai",
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏
is_recording = False
frames = []


def toggle_recording():
    global is_recording, frames, record_button
    if is_recording:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –∏–¥—ë—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        is_recording = False
        record_button.config(text="–ó–∞–ø–∏—Å—å: OFF")
        stop_recording()
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –∏–¥—ë—Ç, –Ω–∞—á–∏–Ω–∞–µ–º
        is_recording = True
        frames = []
        record_button.config(text="–ó–∞–ø–∏—Å—å: ON")
        start_recording()


def start_recording():
    global is_recording, frames
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PyAudio
    audio = pyaudio.PyAudio()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
    stream = audio.open(format=FORMAT,
                        channels=CHANNELS,
                        rate=RATE,
                        input=True,
                        frames_per_buffer=CHUNK)

    label.config(text="–ò–¥—ë—Ç –∑–∞–ø–∏—Å—å...")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def record():
        global is_recording, frames
        while is_recording:
            data = stream.read(CHUNK)
            frames.append(data)

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Ç–æ–∫–∞
        stream.stop_stream()
        stream.close()
        audio.terminate()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        with wave.open(OUTPUT_FILENAME, "wb") as wf:
            wf.setnchannels(CHANNELS)
            wf.setsampwidth(audio.get_sample_size(FORMAT))
            wf.setframerate(RATE)
            wf.writeframes(b"".join(frames))

        label.config(text="–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç—Å—è –∞—É–¥–∏–æ...")
        recognize_audio()

    # –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=record).start()


def stop_recording():
    global is_recording
    is_recording = False


def recognize_audio():
    import speech_recognition as sr

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
    recognizer = sr.Recognizer()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ç–µ–∫—Å—Ç
    with sr.AudioFile(OUTPUT_FILENAME) as source:
        audio_data = recognizer.record(source)

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
            TEXT = recognizer.recognize_google(audio_data, language="ru-RU")
            label.config(text=f"–í–∞—à –≤–æ–ø—Ä–æ—Å: {TEXT}")
            chatGPTQuick(TEXT)
            chatGPTFull(TEXT)
        except sr.UnknownValueError:
            label.config(text="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
        except sr.RequestError as e:
            label.config(text=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")


def chatGPTQuick(text):
    # print(f"–ó–∞–ø—Ä–æ—Å –∫ —á–∞—Ç—É –±—ã–ª —Å —Ç–∞–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º: " + text)
    chat_completion = openai.chat.completions.create(
        model="meta-llama/Llama-3.3-70B-Instruct-Turbo",
        messages=[{"role": "user", "content": text}, {"role": "system", "content": "Concisely respond, limiting your answer to 70 words."}],
    )
    quick_response = chat_completion.choices[0].message.content
    short_text_area.delete("1.0", tk.END)  # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    short_text_area.insert(tk.END, quick_response)  # –í—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç


def chatGPTFull(text):
    # print(f"–ó–∞–ø—Ä–æ—Å –∫ —á–∞—Ç—É –±—ã–ª —Å —Ç–∞–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º: " + text)
    chat_completion = openai.chat.completions.create(
        model="meta-llama/Llama-3.3-70B-Instruct-Turbo",
        messages=[{"role": "user", "content": text}, {"role": "system", "content": "Before answering, take a deep breath and think step by step.Your answer should not exceed more than 150 words."}],
    )
    full_response = chat_completion.choices[0].message.content
    full_text_area.delete("1.0", tk.END)  # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    full_text_area.insert(tk.END, full_response)  # –í—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç


# –°–æ–∑–¥–∞–Ω–∏–µ GUI
root = tk.Tk()
root.title("Hack interview")
root.geometry("1000x800")

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è
style = Style(theme="superhero")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
PRIMARY_COLOR = "#3498db"  # Blue
SECONDARY_COLOR = "#2ecc71"  # Green
BACKGROUND_COLOR = "#34495e"  # Dark Blue-Gray
TEXT_COLOR = "#ecf0f1"  # Light Gray

style.configure('TLabel', font=('Segoe UI', 12), foreground=TEXT_COLOR)
style.configure('TButton', font=('Segoe UI', 12), background=PRIMARY_COLOR)
style.configure('TFrame', background=BACKGROUND_COLOR)

main_frame = ttk.Frame(root, padding="20 20 20 20")
main_frame.pack(fill=tk.BOTH, expand=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
header_label = ttk.Label(main_frame, text="Hack interview", font=('Segoe UI', 24, 'bold'), foreground=PRIMARY_COLOR)
header_label.pack(pady=20)


# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
label = ttk.Label(main_frame, text="Click the button to start or stop voice recording", wraplength=400)
label.pack(pady=10)

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏
record_button = ttk.Button(main_frame, text="üéôÔ∏è Start Recording", style='success.TButton', command=toggle_recording)
record_button.pack(pady=20)

# –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
short_text_label = ttk.Label(main_frame, text="üíé Quick Answer:")
short_text_label.pack(pady=10)
short_text_area = tk.Text(main_frame, height=5, wrap="word", font=('Segoe UI', 12), bg=BACKGROUND_COLOR, fg=TEXT_COLOR, insertbackground=TEXT_COLOR)
short_text_area.pack(pady=5, fill=tk.X)

# –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
full_text_label = ttk.Label(main_frame, text="üìä Full Analysis:")
full_text_label.pack(pady=10)
full_text_area = tk.Text(main_frame, height=15, wrap="word", font=('Segoe UI', 12), bg=BACKGROUND_COLOR, fg=TEXT_COLOR, insertbackground=TEXT_COLOR)
full_text_area.pack(pady=5, fill=tk.BOTH, expand=True)

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
root.mainloop()